extern jprintln(fmt: str, ...): void;
extern input(bytes: int, prompt: str): str;
extern __panic(msg: str): void;
extern jformat(fmt: str, ...): str;
extern println(msg: str): void;
extern malloc(bytes: u64): ptr<void>;
extern realloc(pointer: ptr<void>, bytes: u64): ptr<void>;
extern write_int(i: int): void;

bundle "lib/string.jr" as string;
bundle "lib/vec.jr" as vec;

struct opt[T] {
	value: T,
	is_good: int,
	fn unwrap(self): T {
		if self.is_good != 1 {
			__panic(jformat("Unwrapping a bad option"));
		}
		ret self.value;
	}
	fn is_some(self): int {
		ret self.is_good;
	}
	
}
 
struct result[U, E] {
 	ok: U,
 	err: E,
}
 
fn newopt[T](i: T): opt<T> {
 	ret {value: i, is_good: 1};
}



struct Foo {
	fn f(): str {
		ret "hey";
	}
}

fn main(): int {
	let t:= vec::newVec<int>();
	t.push(2);
	write_int(t.at(0));
	ret 0;
}
